/*
 * this is a block comment
 * it can go on multiple lines
 */

type anInt int32;

type AStruct struct {
	a: int64,
	b: float64,
};

type BStruct struct {
	a: int64,
	b: float64,
	c: AStruct,
};

var str: string = "\u0009string\n\tmulti line";
var something: bool;

// fn get(ints: int64, idx: int64): int64 {
// 	return ints+idx;
// }

fn aFunc(): float64 {
	return 0.4 + 0.601;
}

fn cat(in: int64): int64 {
	return in;
}

fn isEven(num: int64): bool {
	var a: bool = num%2 == 0;
	return a;
}

fn sum(first: int64, second: int64): int64 {
	return first + second;
}

fn inc(val: &int64) {
	*val = *val + 1;
	return;
}

fn structArg(arg: BStruct): float64 {
	arg.a = 32;

	print("\narg: {");
	print(arg.a);
	print(arg.b);
	print(arg.c.a);
	print(arg.c.b);
	print("}\n");


	return arg.c.b;
}

fn structRet(a: int64, b: float64): AStruct {
	var result: AStruct;

	result.a = a;
	result.b = b;

	return result;
}

fn testLocalScope() {
	print("");

	{
		var a: int64 = 1;
		var b: int64 = 2;
		var c: int64 = 3;
		var d: int64 = 4;

		print(a);
		print(b);
		print(c);
		print(d);

		if c == 3 {
			var a: int64 = 5;
			print(a);
			{
				var e: int64 = 32;
				print(e);
			}
			print(b);
		}

		print(a);
	}

	print("");

	{
		var a: int64 = 2;
		{
			var b: int64 = 4;
			{
				var c: int64 = 6;
				{
					var d: int64 = 8;
					print(a);
					print(b);
					print(c);
					print(d);
				}
				var e: int64 = 10;
				print(e);
			}
		}

		var f: int64 = 12;
		{
			var g: int64 = 14;
			print(f);
			print(g);
		}
	}

	print("");

	return;
}

fn main() {
	const αConst: int64 = 69;
	var a: int64 = 0x1A4;
	var b: bool = false;
	var c: string = "3";
	var d: int64 = 4;
	var pi: float64 = 3.14159265;

	println(a);
	print(pi);
	print(str);
	println("hello world");

	a = αConst * 3 + 1;

	// line comment

	if b {
		something = true;
		d += 2;
		print("b is true");
	}

	if a == 208 {
		something = false;
		d += 1;
		print("b is a = 208");
	} elif true {
		a = 210;
		print("elif");
	} else {
		a = 209;
		print("else");
	}

	var ints: int64 = 1 + // nikke deuke
	1;
	
	ints += αConst;

	var shouldBeTrue: bool = b && a == 208;
	var test: bool = b || a == 208;
	// println("ints[a] =", get(ints, a), "| a =", a);



	var one: int64 = 1;
	var two: int64 = one << one;
	var eight: int64 = 1 << (two + one);
	var negTwo: int64 = -2;
	var negone: int64 = negTwo >> 1;

	var three: int64 = 7 & 11;
	var five: int64 = 1 | 4;
	var six: int64 = 5 ^ 3;

	var x: int64 = 1;
	x |= 2;
	x ^= 6;
	x <<= 1;
	x &= 2;
	x >>= 1;

	var zero: int64 = 0;
	var fifteen: int64 = 0xf;

	print(one);
	print(two);
	print(eight);
	print(negTwo);
	print(negone);
	print(three);
	print(five);
	print(six);
	print(x);
	print(zero);
	print(fifteen);

	print(aFunc());
	print(cat(12321));
	print(sum(1000, 9 + fifteen));

	print(isEven(3));
	var temp: bool = isEven(6);
	print(temp);

	print("\n0 to 9:");
	var i: int64 = 0;
	while i < 10 {
		print(i);
		i += 1;
	}

	print(!false);
	print(~0);
	print(-~0);
	print(-negTwo);
	print(+69);
	print(+αConst);
	print(1 - -1);
	print(-(-negone));

	var negThreeHalfs: float64 = -1.5;
	print(negThreeHalfs);

	var value: int64 = 1;
	var ptr: &int64 = &value;

	print(value);
	print(*ptr);

	value = 2;

	print(value);
	print(*ptr);

	*ptr = 3;

	print(value);
	print(*ptr);

	inc(&value);

	print(value);
	print(*ptr);

	*ptr *= 2;

	print(value);
	print(*ptr);

	var ptrPtr: &&int64 = &ptr;

	**ptrPtr -= 1;

	print(value);
	print(*ptr);
	print(**ptrPtr);

	print("a outside of block:");
	print(a);
	if true {
		var a: int64 = 42;
		print("a in block");
		print(a);
	}


	var aInt: anInt = (3: anInt);
	print(aInt);
	print((aInt: int8));

	var aIntPtr: &anInt = &aInt;
	*aIntPtr = (55: anInt);

	print(aInt);
	print(*aIntPtr);

	/*
	 in | out
	--------
	 u  =  u
	 u  <  u
	 u  >  u

	 u  =  s
	 u  <  s
	 u  >  s

	 s  =  u
	 s  <  u
	 s  >  u

	 s  =  s
	 s  <  s
	 s  >  s
	*/

	print("");

	var castTesterU: uint32 = (0xffffffff: uint32);
	print((castTesterU: uint32));
	print((castTesterU: uint64));
	print((castTesterU: uint16));

	print("");

	print((castTesterU: int32));
	print((castTesterU: int64));
	print((castTesterU: int16));

	var castTesterI: int32 = (0xffffffff: int32);

	print("");

	print((castTesterI: uint32));
	print((castTesterI: uint64));
	print((castTesterI: uint16));

	print("");

	print((castTesterI: int32));
	print((castTesterI: int64));
	print((castTesterI: int16));

	print("");

	var structVar: BStruct;
	structVar.a = 1;
	structVar.b = 2.0;
	structVar.c.a = 3;
	structVar.c.b = 4.0;
	var fieldRef: &int64 = &structVar.c.a;
	print(*fieldRef);
	print(structVar.c.a);
	print(structVar.a);

	fieldRef = &structVar.a;
	print(*fieldRef);

	var copied: BStruct = structVar;

	print(copied.a);
	print(copied.b);
	print(copied.c.a);
	print(copied.c.b);

	print(structArg(structVar));

	structVar.c = structRet(100, 200.0);

	print(structVar.a);
	print(structVar.b);
	print(structVar.c.a);
	print(structVar.c.b);

	print(copied.a);
	print(copied.b);
	print(copied.c.a);
	print(copied.c.b);

	testLocalScope();

	return;
}

