/* this is a block comment
 * it can go on multiple lines
 */

var str: string = "\u0009string\n\tmulti line";
var something: bool;

// fn get(ints: int64, idx: int64): int64 {
// 	return ints+idx;
// }

fn aFunc(): float64 {
	return 0.4 + 0.6;
}

fn cat(in: int64): int64 {
	return in;
}

fn isEven(num: int64): bool {
	return num%2 == 0;
}

fn sum(first: int64, second: int64): int64 {
	return first + second;
}

fn main() {
	const αConst: int64 = 69;
	var a: int64 = 0x1A4;
	var b: bool = false;
	var c: string = "3";
	var d: int64 = 4;
	var pi: float64 = 3.14159265;

	println(a);
	print(pi);
	print(str);
	println("hello world");

	a = αConst * 3 + 1;

	// line comment

	if b {
		something = true;
		d += 2;
	}

	if a == 208 {
		something = false;
		d += 1;
	} elif true {
		a = 210;
	} else {
		a = 209;
	}

	var ints: int64 = 1 + // nikke deuke
	1;
	
	ints += αConst;

	var shouldBeTrue: bool = b && a == 208;
	var test: bool = b || a == 208;
	// println("ints[a] =", get(ints, a), "| a =", a);



	var one: int64 = 1;
	var two: int64 = one << one;
	var eight: int64 = 1 << (two + one);
	var negTwo: int64 = -2;
	var negone: int64 = negTwo >> 1;

	var three: int64 = 7 & 11;
	var five: int64 = 1 | 4;
	var six: int64 = 5 ^ 3;

	var x: int64 = 1;
	x |= 2;
	x ^= 6;
	x <<= 1;
	x &= 2;
	x >>= 1;

	var zero: int64 = 0;
	var fifteen: int64 = 0xf;

	print(one);
	print(two);
	print(eight);
	print(negTwo);
	print(negone);
	print(three);
	print(five);
	print(six);
	print(x);
	print(zero);
	print(fifteen);

	print(aFunc());
	print(cat(12321));
	print(sum(1000, 9 + fifteen));

	print(isEven(3));
	print(isEven(6));

	print("\n0 to 9:");
	var i: int64 = 0;
	while i < 10 {
		print(i);
		i += 1;
	}

	print(!false);
	print(~0);
	print(-~0);
	print(-negTwo);
	print(+69);
	print(+αConst);
	print(1 - -1);
	print(-(-negone));

	var array: []int64;
	var ptr: &int64;

	return;
}

